// Build for a particular environment using `gradle -Penv=local build`

buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
    }
    repositories {
        maven {
            url "${artifactory_pluginsUrl}"
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:3.1.1'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'se.transmode.gradle:gradle-docker:1.2'
    }
}

ext {
    environment = 'h2'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'docker'

group 'io.metamorphic'
version '1.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7

loadConfiguration()

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'h2'
    setProperty 'environment', environment
}

apply from: 'tasks.gradle'

processResources.dependsOn copyConfiguration

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

configurations {
    provided
    compile.extendsFrom provided
}

jar {
    baseName = 'formsapi'
    version = '1.0'
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            publications ('mavenJava')
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

docker {
    maintainer = 'Mark Moloney <markmo@me.com>'
}

group = 'metamorphic'

task buildDocker(type: Docker, dependsOn: build) {
    push = true
//    registry = '192.168.99.100:5000'
    registry = '192.168.33.11:5000'
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst {
        copy {
            from jar
            into stageDir
        }
        copy {
            from 'public'
            into "$stageDir/public"
        }
        copy {
            from 'data'
            into "$stageDir/data"
        }
    }
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-data-rest'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.hibernate:hibernate-core:4.3.8.Final'
    compile 'org.hibernate:hibernate-entitymanager:4.3.8.Final'
    compile 'org.hibernate.common:hibernate-commons-annotations:4.0.5.Final'
    compile 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final'
    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    compile 'org.postgresql:postgresql:9.4-1201-jdbc4'
    compile 'com.h2database:h2'
    compile 'com.zaxxer:HikariCP-java6:2.3.8'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
    distributionUrl = "https://services.gradle.org/distributions/gradle-$gradleVersion-all.zip"
}