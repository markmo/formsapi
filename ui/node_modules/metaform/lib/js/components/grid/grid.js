var React = require('react');
var AppActions = require('../../actions/app-actions');
var request = require('superagent');
var pluralize = require('pluralize');
var Paginator = require('./paginator');
var ModalForm = require('../form/modal-form');
var ConfirmButton = require('../form/confirm-button');
var StringUtils = require('../../helpers/string');
window.$ = window.jQuery = require('jquery');

var ds1url = window.apiBaseURL || '/api';

var Grid = React.createClass({displayName: "Grid",

  getInitialState: function () {
    var sortBy, order;
    if (this.props.sortBy) {
      sortBy = this.props.sortBy;
    } else {
      if ('nameColumn' in this.props) {
        if (this.props.computedColumns && this.props.nameColumn in this.props.computedColumns) {
          sortBy = this.props.computedColumns[this.props.nameColumn].sortBy;
        } else {
          sortBy = this.props.nameColumn;
        }
      } else {
        sortBy = 'name';
      }
    }
    order = this.props.order || 'asc';
    return {
      rows: [],
      page: 1,
      pageSize: 10,
      totalEntries: 0,
      sortBy: sortBy,
      order: order,
      item: {},
      currentIndex: -1
    };
  },

  computeTotalPages: function () {
    var totalEntries = this.state.totalEntries;
    var pageSize = this.state.pageSize;
    var totalPages = parseInt(totalEntries / pageSize, 10) || 1;
    if (totalPages * pageSize < totalEntries) {
      totalPages += 1;
    }
    return totalPages;
  },

  handlePageChange: function (direction) {
    var page;
    switch (direction) {
      case 'first':
        page = 1;
        break;

      case 'prev':
        page = this.state.page - 1;
        break;

      case 'next':
        page = this.state.page + 1;
        break;

      case 'last':
        page = this.computeTotalPages();
    }
    this.setState({page: page});
    this.fetchPage(this.props, page, this.state.sortBy, this.state.order);
  },

  handlePageSizeChange: function (pageSize) {
    this.setState({pageSize: pageSize});
    this.fetchPage(this.props, this.state.page, this.state.sortBy, this.state.order);
  },

  sort: function (field) {
    var sortBy = this.state.sortBy;
    var order = this.state.order;
    if (sortBy === field) {
      if (order === 'asc') {
        order = 'desc';
      } else {
        order = 'asc';
      }
    } else {
      sortBy = field;
      order = 'asc';
    }
    this.setState({
      sortBy: sortBy,
      order: order
    });
    this.fetchPage(this.props, this.state.page, sortBy, order);
  },

  fetchPage: function (props, page, sortBy, order, q) {
    var source = props.source.replace('$ds1url', ds1url);
    if (props.filter && (props.filterParam || q)) {
      source += '/search/' + props.filter + '?';
      if (!q) q = '';
      if (props.filterParam) {
        source += props.filterParam + '&q=' + q;
      } else {
        source += 'q=' + q;
      }
      source += '&';
    } else {
      source += '?';
    }
    if (props.view) {
      source += 'projection=' + props.view + '&';
    }
    source += 'page=' + (page - 1) + '&size=' + this.state.pageSize;
    source += '&sort=' + sortBy + ',' + order;
    request
      .get(source)
      .end(function (res) {
        if (this.isMounted) {
          if (res.ok) {
            var json = JSON.parse(res.text);
            var totalEntries = json.page.totalElements;
            var rows = [];
            if (totalEntries > 0) {
              rows = json['_embedded'][pluralize(props.entity)];
            }
            this.setState({
              totalEntries: totalEntries,
              rows: rows
            });
          }
        }
      }.bind(this));
  },

  componentDidMount: function () {
    this.fetchPage(this.props, this.state.page, this.state.sortBy, this.state.order);
    if (this.props.filter) {
      var self = this;
      $(this.refs.filter1.getDOMNode()).on('searched.fu.search', function () {
        var q = $(this).find('input').val();
        self.fetchPage(self.props, 1, self.state.sortBy, self.state.order, q);
      }).on('cleared.fu.search', function () {
        self.fetchPage(self.props, 1, self.state.sortBy, self.state.order);
      });
    }
  },

  componentWillReceiveProps: function (nextProps) {
    if (nextProps.entity !== this.props.entity) {
      var sortBy, order;
      if (nextProps.sortBy) {
        sortBy = nextProps.sortBy;
      } else {
        if ('nameColumn' in nextProps) {
          if (nextProps.computedColumns && nextProps.nameColumn in nextProps.computedColumns) {
            sortBy = nextProps.computedColumns[nextProps.nameColumn].sortBy;
          } else {
            sortBy = nextProps.nameColumn;
          }
        } else {
          sortBy = 'name';
        }
      }
      order = nextProps.order || 'asc';
      this.setState({
        rows: [],
        page: 1,
        pageSize: 10,
        totalEntries: 0,
        sortBy: sortBy,
        order: order,
        item: {},
        currentIndex: -1
      });
      this.fetchPage(nextProps, 1, sortBy, order);
    }
  },

  createItem: function () {
    this._createModal({});
  },

  editItem: function (i) {
    this.setState({currentIndex: i});
    var item = this.state.rows[i];
    this._createModal(item);
  },

  deleteItems: function () {
    var self = this;
    var rows = this.state.rows;
    var remaining = [];
    var deletions = [];
    var $checkboxes = $('.item-delete').each(function (i, item) {
      if (item.checked) {
        var url = rows[i]._links.self.href;
        deletions.push(url);
        //request.del(url).end(function () { console.log('deleted ' + url); });
      } else {
        remaining.push(rows[i]);
      }
    });
    AppActions.deleteEntities(deletions).then(function () {
      $checkboxes.prop('checked', false);
      self.setState({rows: remaining});
      setTimeout(function () {self.refresh()}, 200);
    });
  },

  handleSubmission: function (obj) {

    // workaround as Spring Data REST does not provide a link/identifier for associated entities.
    // TODO
    // this must be refactored to use the Store
    // setTimeout(function () {
    //   this.fetchPage(this.props, this.state.page, this.state.sortBy, this.state.order);
    // }.bind(this), 200);
    setTimeout(this.refresh, 2000);

    // var currentIndex = this.state.currentIndex;
    // var rows = this.state.rows.slice(0);
    // if (currentIndex < 0) {
    //   rows.unshift(obj);
    //   this.setState({rows: rows});
    // } else {
    //   rows.splice(currentIndex, 1, obj);
    //   this.setState({
    //     rows: rows,
    //     currentIndex: -1
    //   });
    // }
  },

  refresh: function () {
    this.fetchPage(this.props, this.state.page, this.state.sortBy, this.state.order);
  },

  render: function () {
    var nameColumn = this.props.nameColumn || 'name';
    var title = this.props.title || StringUtils.readable(this.props.entity);
    var projection = this.props.projection;
    var addButton = (
      React.createElement("button", {className: "btn btn-default btn-success", onClick: this.createItem}, 
        React.createElement("span", {className: "glyphicon glyphicon-plus glyphicon-white", "aria-hidden": "true"}), 
        React.createElement("span", null, " New ", title, "â€¦")
      )
    );
    var filterCtrl = (
      React.createElement("div", {className: "search input-group", role: "search", ref: "filter1", "data-initialize": "search"}, 
        React.createElement("input", {type: "search", className: "form-control", placeholder: 'Filter by ' + this.props.nameColumn}), 
        React.createElement("span", {className: "input-group-btn"}, 
          React.createElement("button", {className: "btn btn-default", type: "button"}, 
            React.createElement("span", {className: "glyphicon glyphicon-search"}), 
            React.createElement("span", {className: "sr-only"}, "Filter")
          )
        )
      )
    );
    var actionColumns = (
      React.createElement("th", {colSpan: "2", className: "action-columns"})
    );
    var editColumn = function (row, i) {
      var actions = this.props.computedColumns && this.props.computedColumns.actions;
      if (actions) {
        return (
          React.createElement("td", {className: "action-edit"}, 
            React.createElement("div", {className: "dropdown"}, 
              React.createElement("a", {href: "#", id: 'actions_' + i, "data-target": "#", "data-toggle": "dropdown", "aria-haspopup": "true", role: "button", "aria-expanded": "false"}, 
                "Actions", 
                React.createElement("span", {className: "caret"})
              ), 
              React.createElement("ul", {className: "dropdown-menu dropdown-menu-right", role: "menu", "aria-labelledby": 'actions_' + i}, 
                React.createElement("li", {role: "presentation", className: "dropdown-header"}, 
                  row[nameColumn]
                ), 
                React.createElement("li", {role: "presentation"}, 
                  React.createElement("a", {href: "#", role: "menuitem", tabIndex: "-1", onClick: this.editItem.bind(this, i)}, 
                    React.createElement("span", {className: "glyphicon glyphicon-edit", "aria-hidden": "true"}), 
                    "Edit item"
                  )
                ), 
                actions.map(function (action) {
                  var a = action(row);
                  if (React.isValidElement(a)) {
                    return a;
                  }
                  return (
                    React.createElement("li", {role: "presentation"}, 
                      React.createElement("a", {href: "#", role: "menuitem", tabIndex: "-1", onClick: a.onClick}, 
                        React.createElement("span", {className: a.iconClassName, "aria-hidden": "true"}), 
                        a.title
                      )
                    )
                  );
                })
              )
            )
          )
        );
      } else {
        return (
          React.createElement("td", {className: "action-edit"}, 
            React.createElement("a", {href: "#", className: "item-edit", alt: "Edit item", title: "Edit item", onClick: this.editItem.bind(this, i)}, 
              React.createElement("span", {className: "glyphicon glyphicon-edit", "aria-hidden": "true"})
            )
          )
        );
      }
    }.bind(this);
    var deleteColumn = (
      React.createElement("td", {className: "action-delete"}, React.createElement("input", {className: "item-delete", type: "checkbox", alt: "Check to delete", title: "Check to delete"}))
    );
    // var deleteButton = (
    //   <td className="action-delete">
    //     <button className="btn btn-danger" onClick={this.deleteItems}>
    //       <span className="glyphicon glyphicon-remove glyphicon-white" aria-hidden="true"></span>
    //       Delete
    //     </button>
    //   </td>
    // );
    var deleteButton = (
      React.createElement("td", {className: "action-delete"}, 
        React.createElement(ConfirmButton, {title: "Delete", onAccept: this.deleteItems})
      )
    );
    return (
      React.createElement("div", {className: "grid"}, 
        React.createElement("h1", {dangerouslySetInnerHTML: {__html: this.props.parent ? this.props.parent + ' > ' + pluralize(title) : pluralize(title)}}), 
        React.createElement("div", {className: "grid-controls clearfix"}, 
          React.createElement("div", null, this.props.editable ? addButton : null), 
          React.createElement("div", {className: "filter-control"}, this.props.filter ? filterCtrl : null), 
          React.createElement("div", {className: "refresh-btn"}, 
            React.createElement("button", {className: "btn btn-default", onClick: this.refresh}, 
              React.createElement("i", {className: "fa fa-refresh"})
            )
          )
        ), 
        React.createElement("div", {ref: "modal"}), 
        React.createElement("table", {className: "table table-hover"}, 
          React.createElement("thead", null, 
          React.createElement("tr", null, 
            this.props.projection.map(function (column, i) {
              var header = StringUtils.readable(column);
              var className;
              var sortBy;
              if (this.props.computedColumns && column in this.props.computedColumns) {
                sortBy = this.props.computedColumns[column].sortBy;
              } else {
                sortBy = column;
              }
              if (this.state.sortBy === sortBy) {
                if (this.state.order === 'asc') {
                  className = 'sort-asc';
                } else {
                  className = 'sort-desc';
                }
                return (
                  React.createElement("th", {key: 'header' + i, className: className}, React.createElement("a", {href: "#", onClick: this.sort.bind(this, sortBy)}, header))
                );
              } else {
                return (
                  React.createElement("th", {key: 'header' + i}, React.createElement("a", {href: "#", onClick: this.sort.bind(this, sortBy)}, header))
                );
              }
            }, this), 
            this.props.editable ? actionColumns : null
          )
          ), 
          React.createElement("tbody", null, 
          this.state.rows.map(function (row, i) {
            return (
              React.createElement("tr", {key: row.id}, 
                this.props.projection.map(function (column) {
                  var value;
                  if (this.props.computedColumns && column in this.props.computedColumns) {
                    value = this.props.computedColumns[column].compute(row);
                  } else {
                    value = row[column];
                  }
                  if (this.props.editable && column === nameColumn) {
                    return (
                      React.createElement("td", null, React.createElement("a", {href: "#", onClick: this.editItem.bind(this, i)}, value))
                    );
                  } else {
                    return (
                      React.createElement("td", null, value)
                    );
                  }
                }.bind(this)), 
                this.props.editable ? editColumn(row, i) : null, 
                this.props.editable ? deleteColumn : null
              )
            );
          }, this)
          ), 
          React.createElement("tfoot", null, 
          React.createElement("tr", null, 
            React.createElement("td", {colSpan: this.props.projection.length + (this.props.editable ? 1 : 0), className: "pagination-cell"}, 
              React.createElement(Paginator, {page: this.state.page, pageSize: this.state.pageSize, totalEntries: this.state.totalEntries, 
                         onPageChange: this.handlePageChange, onPageSizeChange: this.handlePageSizeChange})
            ), 
            this.props.editable ? deleteButton : null
          )
          )
        )
      )
    );
  },

  _createModal: function (item) {
    this.setState({item: item});
    //var container = this.refs.modal.getDOMNode();
    var container = document.getElementById('modals');
    if (!container) {
      container = this.refs.modal.getDOMNode();
    }
    var entity = this.props.entity;
    var title = this.props.title || StringUtils.readable(entity);
    React.render(
      React.createElement(ModalForm, {
        title: title,
        name: entity,
        value: item,
        autoshow: true,
        onHidden: function () {
          React.unmountComponentAtNode(container);
        },
        onSubmitted: this.handleSubmission
      }), container);
  }
});

module.exports = Grid;