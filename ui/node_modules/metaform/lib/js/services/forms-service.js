var Promise = require('bluebird');
var request = require('superagent');
var pluralize = require('pluralize');
var jsonPath = require('JSONPath');

var url = window.apiBaseURL || '/api';

function createMenuItems(objs) {
  return objs.map(function (obj) {
    var id = obj['_links'].self.href;

    // remove the optional parts of the url
    var i = id.indexOf('{');
    if (i > 0) {
      id = id.substring(0, i);
    }
    return {
      value: id,
      label: obj.name
    };
  });
}

function getKeyForSource(source) {
  if (source) {
    var i = source.lastIndexOf('/') + 1;
    return source.substring(i);
  }
  return source;
}

module.exports = {

  getFormSchema: function (name) {
    return new Promise(function (resolve, reject) {
      request.get(url + '/form-schemas/search/findByName?name=' + name, function (err, res) {
        if (res.ok) {
          var json = JSON.parse(res.text);
          resolve(JSON.parse(json['_embedded']['form-schemas'][0].schema));
        } else {
          var json = JSON.parse(res.text);
          var message = jsonPath.eval(json, '$..message').join('; ');
          reject({error: message, message: message});
        }
      })
    });
  },

  createEntity: function (type, data) {
    return new Promise(function (resolve, reject) {
      request.post(url + '/' + pluralize(type))
        .send(data)
        .end(function (err, res) {
          if (res.ok) {
            resolve();
          } else {
            var json = JSON.parse(res.text);
            var message = jsonPath.eval(json, '$..message').join('; ');
            reject({error: message, message: message});
          }
        });
    });
  },

  updateEntity: function (link, data) {
    return new Promise(function (resolve, reject) {
      request.patch(link)
        .send(data)
        .end(function (err, res) {
          if (res.ok) {
            resolve();
          } else {
            var json = JSON.parse(res.text);
            var message = jsonPath.eval(json, '$..message').join('; ');
            reject({error: message, message: message});
          }
        });
    });
  },

  deleteEntities: function (links) {
    return new Promise(function (resolve, reject) {
      var k = links.length;
      for (var i = 0; i < links.length; i++) {
        request.del(links[i])
          .end(function (err, res) {
            if (res.ok) {
              k -= 1;
              if (k === 0) {
                resolve();
              }
            } else {
              if (err) {
                reject(err);
              } else {
                var json = JSON.parse(res.text);
                var message = jsonPath.eval(json, '$..message').join('; ');
                reject({error: message, message: message});
              }
            }
          });
      }
    });
  },

  getEntity: function (type, id) {
    var link = url + '/' + type + '/' + id + '?projection=grid';
    return new Promise(function (resolve, reject) {
      request.get(link)
        .end(function (err, res) {
          if (res.ok) {
            resolve(JSON.parse(res.text));
          } else {
            var json = JSON.parse(res.text);
            var message = jsonPath.eval(json, '$..message').join('; ');
            reject({error: message, message: message});
          }
        });
    });
  },

  saveValue: function (type, id, field, value) {
    var link = url + '/' + type + '/' + id;
    var data = {};
    data[field] = value;
    return new Promise(function (resolve, reject) {
      request.patch(link)
        .send(data)
        .end(function (err, res) {
          if (res.ok) {
            resolve();
          } else {
            var json = JSON.parse(res.text);
            var message = jsonPath.eval(json, '$..message').join('; ');
            reject({error: message, message: message});
          }
        });
    });
  },

  getSelectOptions: function (source, q, async) {
    return new Promise(function (resolve, reject) {
      var obj = {};
      var key;
      if (async) {
        key = source.match(/\/([\w-]+)\/search/)[1];
      } else {
        key = getKeyForSource(source);
      }
      if (async && !q) {
        obj[key] = [];
        resolve(obj);
      } else {
        request
          .get(source.replace('$ds1url', url) + (async ? q + '&' : '?') + 'size=99999')
          .end(function (res) {
            if (res.ok) {
              var json = JSON.parse(res.text);
              var rows = [];
              var totalEntries = json.page.totalElements;
              var parts = source.split('/');
              var type = parts[parts.length - (async ? 3 : 1)];
              if (totalEntries > 0) {
                var types = Object.keys(json['_embedded']);
                // if (types.length > 1) {
                  for (var i = 0; i < types.length; i++) {
                    Array.prototype.push.apply(rows, json['_embedded'][types[i]]);
                  }
                // } else {
                //   rows = json['_embedded'][type];
                // }
              }
              var menuItems;
              if (rows && rows.length) {
                menuItems = createMenuItems(rows);
              } else {
                menuItems = [];
              }
              obj[key] =  menuItems;
              resolve(obj);
            } else {
              reject(JSON.parse(res.text));
            }
          });
      }
    });
  }
};